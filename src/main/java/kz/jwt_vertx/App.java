/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kz.jwt_vertx;

import io.vertx.core.Vertx;
import io.vertx.core.http.HttpMethod;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.auth.User;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.handler.AuthenticationHandler;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.ext.web.handler.CorsHandler;
import io.vertx.ext.web.handler.JWTAuthHandler;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class App {

    public static Logger log = LogManager.getLogger(App.class);

    public String getGreeting() {
        return "jwt vertx started.";
    }

    public static void main(String[] args) throws Exception {

        Vertx vertx = Vertx.vertx();
        JWTAuthHelper jwtAuthHelper = new JWTAuthHelper(vertx);

        String token = jwtAuthHelper.getToken();
        log.info("auth token  {}", token);

        JsonObject jwt = new JsonObject();
        jwt.put("jwt", token);
        jwtAuthHelper.authenticate(jwt);

        Router router = Router.router(vertx);
        router.route().handler(BodyHandler.create());
        CorsHandler corsHandler = CorsHandler.create("*");
        addCors(corsHandler);

        AuthenticationHandler handler = JWTAuthHandler.create(jwtAuthHelper.getProvider());

        router.route("/hello").handler(result -> {
            log.info("hello api route");
            result.response().end("hello ok");
        });

        router.post("/login").handler(login -> {
            JsonObject jsonObject = login.getBodyAsJson();
            String u = jsonObject.getString("username");
            String p = jsonObject.getString("password");
            if(u.equals("test") && p.equals("test")) {
                login.response().end(jwtAuthHelper.getToken());
            }
        });
        router.route("/private/*").handler(handler);
        router.route("/private/hello").handler(ctx -> {
            User u = ctx.user();
            log.info("access_token {}", u.principal().getString("access_token"));
            log.info("username {}", u.principal().getString("username"));
            ctx.response().end("ok");
        });

        vertx.createHttpServer().requestHandler(router).listen(9001);
    }

    public static CorsHandler addCors(CorsHandler corsHandler) {
        corsHandler
                .allowedMethod(HttpMethod.GET)
                .allowedMethod(HttpMethod.DELETE)
                .allowedMethod(HttpMethod.POST)
                .allowedMethod(HttpMethod.PUT)
                .allowedMethod(HttpMethod.PATCH)
                .allowedHeader("Authorization")
                .allowedHeader("user-agent")
                .allowedHeader("Access-Control-Request-Method")
                .allowedHeader("Access-Control-Allow-Credentials")
                .allowedHeader("Access-Control-Allow-Origin")
                .allowedHeader("Access-Control-Allow-Headers")
                .allowedHeader("Content-Type")
                .allowedHeader("Content-Length")
                .allowedHeader("X-Requested-With")
                .allowedHeader("x-auth-token")
                .allowedHeader("Location")
                .exposedHeader("Location")
                .exposedHeader("Content-Type")
                .exposedHeader("Content-Length")
                .exposedHeader("ETag");
        return corsHandler;
    }

}
